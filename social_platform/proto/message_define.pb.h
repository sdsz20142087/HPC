// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_define.proto

#ifndef PROTOBUF_message_5fdefine_2eproto__INCLUDED
#define PROTOBUF_message_5fdefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ssp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_5fdefine_2eproto();
void protobuf_AssignDesc_message_5fdefine_2eproto();
void protobuf_ShutdownFile_message_5fdefine_2eproto();

class RegReq;
class RegRsp;
class LoginReq;
class LoginRsp;
class LogoutReq;
class LogoutRsp;
class PublishMessageReq;
class PublishMessageRsp;
class GetMessageReq;
class MessageBase;
class GetMessageRsp;
class GetPhotoReq;
class GetPhotoRsp;
class AddFriendReq;
class AddFriendRsp;
class DelFriendReq;
class DelFriendRsp;
class AddBlackReq;
class AddBlackRsp;
class DelBlackReq;
class DelBlackRsp;

// ===================================================================

class RegReq : public ::google::protobuf::Message {
 public:
  RegReq();
  virtual ~RegReq();

  RegReq(const RegReq& from);

  inline RegReq& operator=(const RegReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegReq& default_instance();

  void Swap(RegReq* other);

  // implements Message ----------------------------------------------

  RegReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegReq& from);
  void MergeFrom(const RegReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional int32 from = 5;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 5;
  inline ::google::protobuf::int32 from() const;
  inline void set_from(::google::protobuf::int32 value);

  // optional int32 t1 = 31;
  inline bool has_t1() const;
  inline void clear_t1();
  static const int kT1FieldNumber = 31;
  inline ::google::protobuf::int32 t1() const;
  inline void set_t1(::google::protobuf::int32 value);

  // optional int32 t2 = 32;
  inline bool has_t2() const;
  inline void clear_t2();
  static const int kT2FieldNumber = 32;
  inline ::google::protobuf::int32 t2() const;
  inline void set_t2(::google::protobuf::int32 value);

  // optional int32 t3 = 33;
  inline bool has_t3() const;
  inline void clear_t3();
  static const int kT3FieldNumber = 33;
  inline ::google::protobuf::int32 t3() const;
  inline void set_t3(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.RegReq)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_t1();
  inline void clear_has_t1();
  inline void set_has_t2();
  inline void clear_has_t2();
  inline void set_has_t3();
  inline void clear_has_t3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::std::string* user_name_;
  ::std::string* password_;
  ::google::protobuf::int32 from_;
  ::google::protobuf::int32 t1_;
  ::google::protobuf::int32 t2_;
  ::google::protobuf::int32 t3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RegReq* default_instance_;
};
// -------------------------------------------------------------------

class RegRsp : public ::google::protobuf::Message {
 public:
  RegRsp();
  virtual ~RegRsp();

  RegRsp(const RegRsp& from);

  inline RegRsp& operator=(const RegRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegRsp& default_instance();

  void Swap(RegRsp* other);

  // implements Message ----------------------------------------------

  RegRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegRsp& from);
  void MergeFrom(const RegRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 user_id = 4;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // optional string user_name = 5;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 5;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // @@protoc_insertion_point(class_scope:ssp.RegRsp)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 user_id_;
  ::std::string* user_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RegRsp* default_instance_;
};
// -------------------------------------------------------------------

class LoginReq : public ::google::protobuf::Message {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  void Swap(LoginReq* other);

  // implements Message ----------------------------------------------

  LoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:ssp.LoginReq)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::std::string* user_name_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LoginReq* default_instance_;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  void Swap(LoginRsp* other);

  // implements Message ----------------------------------------------

  LoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 user_id = 4;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // optional string user_name = 5;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 5;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // @@protoc_insertion_point(class_scope:ssp.LoginRsp)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 user_id_;
  ::std::string* user_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class LogoutReq : public ::google::protobuf::Message {
 public:
  LogoutReq();
  virtual ~LogoutReq();

  LogoutReq(const LogoutReq& from);

  inline LogoutReq& operator=(const LogoutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutReq& default_instance();

  void Swap(LogoutReq* other);

  // implements Message ----------------------------------------------

  LogoutReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutReq& from);
  void MergeFrom(const LogoutReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.LogoutReq)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LogoutReq* default_instance_;
};
// -------------------------------------------------------------------

class LogoutRsp : public ::google::protobuf::Message {
 public:
  LogoutRsp();
  virtual ~LogoutRsp();

  LogoutRsp(const LogoutRsp& from);

  inline LogoutRsp& operator=(const LogoutRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRsp& default_instance();

  void Swap(LogoutRsp* other);

  // implements Message ----------------------------------------------

  LogoutRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutRsp& from);
  void MergeFrom(const LogoutRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.LogoutRsp)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LogoutRsp* default_instance_;
};
// -------------------------------------------------------------------

class PublishMessageReq : public ::google::protobuf::Message {
 public:
  PublishMessageReq();
  virtual ~PublishMessageReq();

  PublishMessageReq(const PublishMessageReq& from);

  inline PublishMessageReq& operator=(const PublishMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishMessageReq& default_instance();

  void Swap(PublishMessageReq* other);

  // implements Message ----------------------------------------------

  PublishMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishMessageReq& from);
  void MergeFrom(const PublishMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:ssp.PublishMessageReq)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::std::string* content_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PublishMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class PublishMessageRsp : public ::google::protobuf::Message {
 public:
  PublishMessageRsp();
  virtual ~PublishMessageRsp();

  PublishMessageRsp(const PublishMessageRsp& from);

  inline PublishMessageRsp& operator=(const PublishMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishMessageRsp& default_instance();

  void Swap(PublishMessageRsp* other);

  // implements Message ----------------------------------------------

  PublishMessageRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishMessageRsp& from);
  void MergeFrom(const PublishMessageRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.PublishMessageRsp)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PublishMessageRsp* default_instance_;
};
// -------------------------------------------------------------------

class GetMessageReq : public ::google::protobuf::Message {
 public:
  GetMessageReq();
  virtual ~GetMessageReq();

  GetMessageReq(const GetMessageReq& from);

  inline GetMessageReq& operator=(const GetMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageReq& default_instance();

  void Swap(GetMessageReq* other);

  // implements Message ----------------------------------------------

  GetMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMessageReq& from);
  void MergeFrom(const GetMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.GetMessageReq)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GetMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class MessageBase : public ::google::protobuf::Message {
 public:
  MessageBase();
  virtual ~MessageBase();

  MessageBase(const MessageBase& from);

  inline MessageBase& operator=(const MessageBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageBase& default_instance();

  void Swap(MessageBase* other);

  // implements Message ----------------------------------------------

  MessageBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageBase& from);
  void MergeFrom(const MessageBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 message_id = 2;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 2;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);

  // optional int32 publisher = 3;
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 3;
  inline ::google::protobuf::int32 publisher() const;
  inline void set_publisher(::google::protobuf::int32 value);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 publish_time = 5;
  inline bool has_publish_time() const;
  inline void clear_publish_time();
  static const int kPublishTimeFieldNumber = 5;
  inline ::google::protobuf::int32 publish_time() const;
  inline void set_publish_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.MessageBase)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_message_id();
  inline void clear_has_message_id();
  inline void set_has_publisher();
  inline void clear_has_publisher();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_publish_time();
  inline void clear_has_publish_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 message_id_;
  ::std::string* content_;
  ::google::protobuf::int32 publisher_;
  ::google::protobuf::int32 publish_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static MessageBase* default_instance_;
};
// -------------------------------------------------------------------

class GetMessageRsp : public ::google::protobuf::Message {
 public:
  GetMessageRsp();
  virtual ~GetMessageRsp();

  GetMessageRsp(const GetMessageRsp& from);

  inline GetMessageRsp& operator=(const GetMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageRsp& default_instance();

  void Swap(GetMessageRsp* other);

  // implements Message ----------------------------------------------

  GetMessageRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMessageRsp& from);
  void MergeFrom(const GetMessageRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .ssp.MessageBase message_list = 4;
  inline int message_list_size() const;
  inline void clear_message_list();
  static const int kMessageListFieldNumber = 4;
  inline const ::ssp::MessageBase& message_list(int index) const;
  inline ::ssp::MessageBase* mutable_message_list(int index);
  inline ::ssp::MessageBase* add_message_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ssp::MessageBase >&
      message_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ssp::MessageBase >*
      mutable_message_list();

  // @@protoc_insertion_point(class_scope:ssp.GetMessageRsp)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::RepeatedPtrField< ::ssp::MessageBase > message_list_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GetMessageRsp* default_instance_;
};
// -------------------------------------------------------------------

class GetPhotoReq : public ::google::protobuf::Message {
 public:
  GetPhotoReq();
  virtual ~GetPhotoReq();

  GetPhotoReq(const GetPhotoReq& from);

  inline GetPhotoReq& operator=(const GetPhotoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPhotoReq& default_instance();

  void Swap(GetPhotoReq* other);

  // implements Message ----------------------------------------------

  GetPhotoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPhotoReq& from);
  void MergeFrom(const GetPhotoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.GetPhotoReq)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GetPhotoReq* default_instance_;
};
// -------------------------------------------------------------------

class GetPhotoRsp : public ::google::protobuf::Message {
 public:
  GetPhotoRsp();
  virtual ~GetPhotoRsp();

  GetPhotoRsp(const GetPhotoRsp& from);

  inline GetPhotoRsp& operator=(const GetPhotoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPhotoRsp& default_instance();

  void Swap(GetPhotoRsp* other);

  // implements Message ----------------------------------------------

  GetPhotoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPhotoRsp& from);
  void MergeFrom(const GetPhotoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .ssp.MessageBase last_message = 4;
  inline bool has_last_message() const;
  inline void clear_last_message();
  static const int kLastMessageFieldNumber = 4;
  inline const ::ssp::MessageBase& last_message() const;
  inline ::ssp::MessageBase* mutable_last_message();
  inline ::ssp::MessageBase* release_last_message();
  inline void set_allocated_last_message(::ssp::MessageBase* last_message);

  // @@protoc_insertion_point(class_scope:ssp.GetPhotoRsp)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_last_message();
  inline void clear_has_last_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::ssp::MessageBase* last_message_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GetPhotoRsp* default_instance_;
};
// -------------------------------------------------------------------

class AddFriendReq : public ::google::protobuf::Message {
 public:
  AddFriendReq();
  virtual ~AddFriendReq();

  AddFriendReq(const AddFriendReq& from);

  inline AddFriendReq& operator=(const AddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendReq& default_instance();

  void Swap(AddFriendReq* other);

  // implements Message ----------------------------------------------

  AddFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendReq& from);
  void MergeFrom(const AddFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // optional int32 other_id = 4;
  inline bool has_other_id() const;
  inline void clear_other_id();
  static const int kOtherIdFieldNumber = 4;
  inline ::google::protobuf::int32 other_id() const;
  inline void set_other_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.AddFriendReq)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_other_id();
  inline void clear_has_other_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 other_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static AddFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class AddFriendRsp : public ::google::protobuf::Message {
 public:
  AddFriendRsp();
  virtual ~AddFriendRsp();

  AddFriendRsp(const AddFriendRsp& from);

  inline AddFriendRsp& operator=(const AddFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendRsp& default_instance();

  void Swap(AddFriendRsp* other);

  // implements Message ----------------------------------------------

  AddFriendRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendRsp& from);
  void MergeFrom(const AddFriendRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.AddFriendRsp)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static AddFriendRsp* default_instance_;
};
// -------------------------------------------------------------------

class DelFriendReq : public ::google::protobuf::Message {
 public:
  DelFriendReq();
  virtual ~DelFriendReq();

  DelFriendReq(const DelFriendReq& from);

  inline DelFriendReq& operator=(const DelFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelFriendReq& default_instance();

  void Swap(DelFriendReq* other);

  // implements Message ----------------------------------------------

  DelFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelFriendReq& from);
  void MergeFrom(const DelFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // optional int32 other_id = 4;
  inline bool has_other_id() const;
  inline void clear_other_id();
  static const int kOtherIdFieldNumber = 4;
  inline ::google::protobuf::int32 other_id() const;
  inline void set_other_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.DelFriendReq)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_other_id();
  inline void clear_has_other_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 other_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static DelFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class DelFriendRsp : public ::google::protobuf::Message {
 public:
  DelFriendRsp();
  virtual ~DelFriendRsp();

  DelFriendRsp(const DelFriendRsp& from);

  inline DelFriendRsp& operator=(const DelFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelFriendRsp& default_instance();

  void Swap(DelFriendRsp* other);

  // implements Message ----------------------------------------------

  DelFriendRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelFriendRsp& from);
  void MergeFrom(const DelFriendRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.DelFriendRsp)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static DelFriendRsp* default_instance_;
};
// -------------------------------------------------------------------

class AddBlackReq : public ::google::protobuf::Message {
 public:
  AddBlackReq();
  virtual ~AddBlackReq();

  AddBlackReq(const AddBlackReq& from);

  inline AddBlackReq& operator=(const AddBlackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddBlackReq& default_instance();

  void Swap(AddBlackReq* other);

  // implements Message ----------------------------------------------

  AddBlackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddBlackReq& from);
  void MergeFrom(const AddBlackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // optional int32 other_id = 4;
  inline bool has_other_id() const;
  inline void clear_other_id();
  static const int kOtherIdFieldNumber = 4;
  inline ::google::protobuf::int32 other_id() const;
  inline void set_other_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.AddBlackReq)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_other_id();
  inline void clear_has_other_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 other_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static AddBlackReq* default_instance_;
};
// -------------------------------------------------------------------

class AddBlackRsp : public ::google::protobuf::Message {
 public:
  AddBlackRsp();
  virtual ~AddBlackRsp();

  AddBlackRsp(const AddBlackRsp& from);

  inline AddBlackRsp& operator=(const AddBlackRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddBlackRsp& default_instance();

  void Swap(AddBlackRsp* other);

  // implements Message ----------------------------------------------

  AddBlackRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddBlackRsp& from);
  void MergeFrom(const AddBlackRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.AddBlackRsp)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static AddBlackRsp* default_instance_;
};
// -------------------------------------------------------------------

class DelBlackReq : public ::google::protobuf::Message {
 public:
  DelBlackReq();
  virtual ~DelBlackReq();

  DelBlackReq(const DelBlackReq& from);

  inline DelBlackReq& operator=(const DelBlackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelBlackReq& default_instance();

  void Swap(DelBlackReq* other);

  // implements Message ----------------------------------------------

  DelBlackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelBlackReq& from);
  void MergeFrom(const DelBlackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // optional int32 other_id = 4;
  inline bool has_other_id() const;
  inline void clear_other_id();
  static const int kOtherIdFieldNumber = 4;
  inline ::google::protobuf::int32 other_id() const;
  inline void set_other_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.DelBlackReq)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_other_id();
  inline void clear_has_other_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 other_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static DelBlackReq* default_instance_;
};
// -------------------------------------------------------------------

class DelBlackRsp : public ::google::protobuf::Message {
 public:
  DelBlackRsp();
  virtual ~DelBlackRsp();

  DelBlackRsp(const DelBlackRsp& from);

  inline DelBlackRsp& operator=(const DelBlackRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelBlackRsp& default_instance();

  void Swap(DelBlackRsp* other);

  // implements Message ----------------------------------------------

  DelBlackRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelBlackRsp& from);
  void MergeFrom(const DelBlackRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::int32 ver() const;
  inline void set_ver(::google::protobuf::int32 value);

  // optional int32 mess_type = 2;
  inline bool has_mess_type() const;
  inline void clear_mess_type();
  static const int kMessTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mess_type() const;
  inline void set_mess_type(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.DelBlackRsp)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_mess_type();
  inline void clear_has_mess_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 mess_type_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static DelBlackRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// RegReq

// optional int32 ver = 1;
inline bool RegReq::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegReq::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegReq::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegReq::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 RegReq::ver() const {
  return ver_;
}
inline void RegReq::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool RegReq::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegReq::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegReq::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegReq::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 RegReq::mess_type() const {
  return mess_type_;
}
inline void RegReq::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional string user_name = 3;
inline bool RegReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegReq::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& RegReq::user_name() const {
  return *user_name_;
}
inline void RegReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RegReq::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RegReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegReq::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* RegReq::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 4;
inline bool RegReq::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegReq::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& RegReq::password() const {
  return *password_;
}
inline void RegReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RegReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RegReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* RegReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 from = 5;
inline bool RegReq::has_from() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegReq::set_has_from() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegReq::clear_has_from() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegReq::clear_from() {
  from_ = 0;
  clear_has_from();
}
inline ::google::protobuf::int32 RegReq::from() const {
  return from_;
}
inline void RegReq::set_from(::google::protobuf::int32 value) {
  set_has_from();
  from_ = value;
}

// optional int32 t1 = 31;
inline bool RegReq::has_t1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegReq::set_has_t1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegReq::clear_has_t1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegReq::clear_t1() {
  t1_ = 0;
  clear_has_t1();
}
inline ::google::protobuf::int32 RegReq::t1() const {
  return t1_;
}
inline void RegReq::set_t1(::google::protobuf::int32 value) {
  set_has_t1();
  t1_ = value;
}

// optional int32 t2 = 32;
inline bool RegReq::has_t2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegReq::set_has_t2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegReq::clear_has_t2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegReq::clear_t2() {
  t2_ = 0;
  clear_has_t2();
}
inline ::google::protobuf::int32 RegReq::t2() const {
  return t2_;
}
inline void RegReq::set_t2(::google::protobuf::int32 value) {
  set_has_t2();
  t2_ = value;
}

// optional int32 t3 = 33;
inline bool RegReq::has_t3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegReq::set_has_t3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegReq::clear_has_t3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegReq::clear_t3() {
  t3_ = 0;
  clear_has_t3();
}
inline ::google::protobuf::int32 RegReq::t3() const {
  return t3_;
}
inline void RegReq::set_t3(::google::protobuf::int32 value) {
  set_has_t3();
  t3_ = value;
}

// -------------------------------------------------------------------

// RegRsp

// optional int32 ver = 1;
inline bool RegRsp::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegRsp::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegRsp::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegRsp::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 RegRsp::ver() const {
  return ver_;
}
inline void RegRsp::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool RegRsp::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegRsp::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegRsp::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegRsp::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 RegRsp::mess_type() const {
  return mess_type_;
}
inline void RegRsp::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 ret = 3;
inline bool RegRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RegRsp::ret() const {
  return ret_;
}
inline void RegRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 user_id = 4;
inline bool RegRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegRsp::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 RegRsp::user_id() const {
  return user_id_;
}
inline void RegRsp::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 5;
inline bool RegRsp::has_user_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegRsp::set_has_user_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegRsp::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegRsp::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& RegRsp::user_name() const {
  return *user_name_;
}
inline void RegRsp::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RegRsp::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RegRsp::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegRsp::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* RegRsp::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegRsp::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginReq

// optional int32 ver = 1;
inline bool LoginReq::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 LoginReq::ver() const {
  return ver_;
}
inline void LoginReq::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool LoginReq::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 LoginReq::mess_type() const {
  return mess_type_;
}
inline void LoginReq::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional string user_name = 3;
inline bool LoginReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginReq::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LoginReq::user_name() const {
  return *user_name_;
}
inline void LoginReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LoginReq::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LoginReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LoginReq::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 4;
inline bool LoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginReq::password() const {
  return *password_;
}
inline void LoginReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* LoginReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginRsp

// optional int32 ver = 1;
inline bool LoginRsp::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRsp::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRsp::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRsp::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 LoginRsp::ver() const {
  return ver_;
}
inline void LoginRsp::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool LoginRsp::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRsp::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRsp::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRsp::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 LoginRsp::mess_type() const {
  return mess_type_;
}
inline void LoginRsp::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 ret = 3;
inline bool LoginRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 LoginRsp::ret() const {
  return ret_;
}
inline void LoginRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 user_id = 4;
inline bool LoginRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginRsp::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 LoginRsp::user_id() const {
  return user_id_;
}
inline void LoginRsp::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 5;
inline bool LoginRsp::has_user_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginRsp::set_has_user_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginRsp::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginRsp::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LoginRsp::user_name() const {
  return *user_name_;
}
inline void LoginRsp::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LoginRsp::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LoginRsp::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRsp::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LoginRsp::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRsp::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LogoutReq

// optional int32 ver = 1;
inline bool LogoutReq::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutReq::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutReq::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutReq::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 LogoutReq::ver() const {
  return ver_;
}
inline void LogoutReq::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool LogoutReq::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutReq::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutReq::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutReq::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 LogoutReq::mess_type() const {
  return mess_type_;
}
inline void LogoutReq::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 user_id = 3;
inline bool LogoutReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogoutReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogoutReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogoutReq::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 LogoutReq::user_id() const {
  return user_id_;
}
inline void LogoutReq::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// LogoutRsp

// optional int32 ver = 1;
inline bool LogoutRsp::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutRsp::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutRsp::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutRsp::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 LogoutRsp::ver() const {
  return ver_;
}
inline void LogoutRsp::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool LogoutRsp::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutRsp::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutRsp::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutRsp::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 LogoutRsp::mess_type() const {
  return mess_type_;
}
inline void LogoutRsp::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 ret = 3;
inline bool LogoutRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogoutRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogoutRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogoutRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 LogoutRsp::ret() const {
  return ret_;
}
inline void LogoutRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// PublishMessageReq

// optional int32 ver = 1;
inline bool PublishMessageReq::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishMessageReq::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishMessageReq::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishMessageReq::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 PublishMessageReq::ver() const {
  return ver_;
}
inline void PublishMessageReq::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool PublishMessageReq::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishMessageReq::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishMessageReq::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishMessageReq::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 PublishMessageReq::mess_type() const {
  return mess_type_;
}
inline void PublishMessageReq::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 user_id = 3;
inline bool PublishMessageReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublishMessageReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublishMessageReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublishMessageReq::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PublishMessageReq::user_id() const {
  return user_id_;
}
inline void PublishMessageReq::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string content = 4;
inline bool PublishMessageReq::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PublishMessageReq::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PublishMessageReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PublishMessageReq::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& PublishMessageReq::content() const {
  return *content_;
}
inline void PublishMessageReq::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PublishMessageReq::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PublishMessageReq::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PublishMessageReq::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* PublishMessageReq::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PublishMessageReq::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PublishMessageRsp

// optional int32 ver = 1;
inline bool PublishMessageRsp::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishMessageRsp::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishMessageRsp::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishMessageRsp::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 PublishMessageRsp::ver() const {
  return ver_;
}
inline void PublishMessageRsp::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool PublishMessageRsp::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishMessageRsp::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishMessageRsp::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishMessageRsp::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 PublishMessageRsp::mess_type() const {
  return mess_type_;
}
inline void PublishMessageRsp::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 ret = 3;
inline bool PublishMessageRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublishMessageRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublishMessageRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublishMessageRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 PublishMessageRsp::ret() const {
  return ret_;
}
inline void PublishMessageRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GetMessageReq

// optional int32 ver = 1;
inline bool GetMessageReq::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMessageReq::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMessageReq::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMessageReq::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 GetMessageReq::ver() const {
  return ver_;
}
inline void GetMessageReq::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool GetMessageReq::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMessageReq::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMessageReq::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMessageReq::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 GetMessageReq::mess_type() const {
  return mess_type_;
}
inline void GetMessageReq::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 user_id = 3;
inline bool GetMessageReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetMessageReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetMessageReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetMessageReq::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 GetMessageReq::user_id() const {
  return user_id_;
}
inline void GetMessageReq::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// MessageBase

// optional int32 ver = 1;
inline bool MessageBase::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageBase::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageBase::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageBase::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 MessageBase::ver() const {
  return ver_;
}
inline void MessageBase::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 message_id = 2;
inline bool MessageBase::has_message_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageBase::set_has_message_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageBase::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageBase::clear_message_id() {
  message_id_ = 0;
  clear_has_message_id();
}
inline ::google::protobuf::int32 MessageBase::message_id() const {
  return message_id_;
}
inline void MessageBase::set_message_id(::google::protobuf::int32 value) {
  set_has_message_id();
  message_id_ = value;
}

// optional int32 publisher = 3;
inline bool MessageBase::has_publisher() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageBase::set_has_publisher() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageBase::clear_has_publisher() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageBase::clear_publisher() {
  publisher_ = 0;
  clear_has_publisher();
}
inline ::google::protobuf::int32 MessageBase::publisher() const {
  return publisher_;
}
inline void MessageBase::set_publisher(::google::protobuf::int32 value) {
  set_has_publisher();
  publisher_ = value;
}

// optional string content = 4;
inline bool MessageBase::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageBase::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageBase::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageBase::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MessageBase::content() const {
  return *content_;
}
inline void MessageBase::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MessageBase::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MessageBase::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageBase::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MessageBase::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageBase::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 publish_time = 5;
inline bool MessageBase::has_publish_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageBase::set_has_publish_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageBase::clear_has_publish_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageBase::clear_publish_time() {
  publish_time_ = 0;
  clear_has_publish_time();
}
inline ::google::protobuf::int32 MessageBase::publish_time() const {
  return publish_time_;
}
inline void MessageBase::set_publish_time(::google::protobuf::int32 value) {
  set_has_publish_time();
  publish_time_ = value;
}

// -------------------------------------------------------------------

// GetMessageRsp

// optional int32 ver = 1;
inline bool GetMessageRsp::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMessageRsp::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMessageRsp::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMessageRsp::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 GetMessageRsp::ver() const {
  return ver_;
}
inline void GetMessageRsp::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool GetMessageRsp::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMessageRsp::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMessageRsp::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMessageRsp::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 GetMessageRsp::mess_type() const {
  return mess_type_;
}
inline void GetMessageRsp::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 ret = 3;
inline bool GetMessageRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetMessageRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetMessageRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetMessageRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GetMessageRsp::ret() const {
  return ret_;
}
inline void GetMessageRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .ssp.MessageBase message_list = 4;
inline int GetMessageRsp::message_list_size() const {
  return message_list_.size();
}
inline void GetMessageRsp::clear_message_list() {
  message_list_.Clear();
}
inline const ::ssp::MessageBase& GetMessageRsp::message_list(int index) const {
  return message_list_.Get(index);
}
inline ::ssp::MessageBase* GetMessageRsp::mutable_message_list(int index) {
  return message_list_.Mutable(index);
}
inline ::ssp::MessageBase* GetMessageRsp::add_message_list() {
  return message_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssp::MessageBase >&
GetMessageRsp::message_list() const {
  return message_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ssp::MessageBase >*
GetMessageRsp::mutable_message_list() {
  return &message_list_;
}

// -------------------------------------------------------------------

// GetPhotoReq

// optional int32 ver = 1;
inline bool GetPhotoReq::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPhotoReq::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPhotoReq::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPhotoReq::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 GetPhotoReq::ver() const {
  return ver_;
}
inline void GetPhotoReq::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool GetPhotoReq::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPhotoReq::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPhotoReq::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPhotoReq::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 GetPhotoReq::mess_type() const {
  return mess_type_;
}
inline void GetPhotoReq::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 user_id = 3;
inline bool GetPhotoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPhotoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPhotoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPhotoReq::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 GetPhotoReq::user_id() const {
  return user_id_;
}
inline void GetPhotoReq::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// GetPhotoRsp

// optional int32 ver = 1;
inline bool GetPhotoRsp::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPhotoRsp::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPhotoRsp::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPhotoRsp::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 GetPhotoRsp::ver() const {
  return ver_;
}
inline void GetPhotoRsp::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool GetPhotoRsp::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPhotoRsp::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPhotoRsp::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPhotoRsp::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 GetPhotoRsp::mess_type() const {
  return mess_type_;
}
inline void GetPhotoRsp::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 ret = 3;
inline bool GetPhotoRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPhotoRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPhotoRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPhotoRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GetPhotoRsp::ret() const {
  return ret_;
}
inline void GetPhotoRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .ssp.MessageBase last_message = 4;
inline bool GetPhotoRsp::has_last_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetPhotoRsp::set_has_last_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetPhotoRsp::clear_has_last_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetPhotoRsp::clear_last_message() {
  if (last_message_ != NULL) last_message_->::ssp::MessageBase::Clear();
  clear_has_last_message();
}
inline const ::ssp::MessageBase& GetPhotoRsp::last_message() const {
  return last_message_ != NULL ? *last_message_ : *default_instance_->last_message_;
}
inline ::ssp::MessageBase* GetPhotoRsp::mutable_last_message() {
  set_has_last_message();
  if (last_message_ == NULL) last_message_ = new ::ssp::MessageBase;
  return last_message_;
}
inline ::ssp::MessageBase* GetPhotoRsp::release_last_message() {
  clear_has_last_message();
  ::ssp::MessageBase* temp = last_message_;
  last_message_ = NULL;
  return temp;
}
inline void GetPhotoRsp::set_allocated_last_message(::ssp::MessageBase* last_message) {
  delete last_message_;
  last_message_ = last_message;
  if (last_message) {
    set_has_last_message();
  } else {
    clear_has_last_message();
  }
}

// -------------------------------------------------------------------

// AddFriendReq

// optional int32 ver = 1;
inline bool AddFriendReq::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriendReq::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriendReq::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriendReq::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 AddFriendReq::ver() const {
  return ver_;
}
inline void AddFriendReq::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool AddFriendReq::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddFriendReq::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddFriendReq::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddFriendReq::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 AddFriendReq::mess_type() const {
  return mess_type_;
}
inline void AddFriendReq::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 user_id = 3;
inline bool AddFriendReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddFriendReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddFriendReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddFriendReq::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 AddFriendReq::user_id() const {
  return user_id_;
}
inline void AddFriendReq::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 other_id = 4;
inline bool AddFriendReq::has_other_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddFriendReq::set_has_other_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddFriendReq::clear_has_other_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddFriendReq::clear_other_id() {
  other_id_ = 0;
  clear_has_other_id();
}
inline ::google::protobuf::int32 AddFriendReq::other_id() const {
  return other_id_;
}
inline void AddFriendReq::set_other_id(::google::protobuf::int32 value) {
  set_has_other_id();
  other_id_ = value;
}

// -------------------------------------------------------------------

// AddFriendRsp

// optional int32 ver = 1;
inline bool AddFriendRsp::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriendRsp::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriendRsp::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriendRsp::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 AddFriendRsp::ver() const {
  return ver_;
}
inline void AddFriendRsp::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool AddFriendRsp::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddFriendRsp::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddFriendRsp::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddFriendRsp::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 AddFriendRsp::mess_type() const {
  return mess_type_;
}
inline void AddFriendRsp::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 ret = 3;
inline bool AddFriendRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddFriendRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddFriendRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddFriendRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AddFriendRsp::ret() const {
  return ret_;
}
inline void AddFriendRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// DelFriendReq

// optional int32 ver = 1;
inline bool DelFriendReq::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelFriendReq::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelFriendReq::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelFriendReq::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 DelFriendReq::ver() const {
  return ver_;
}
inline void DelFriendReq::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool DelFriendReq::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelFriendReq::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelFriendReq::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelFriendReq::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 DelFriendReq::mess_type() const {
  return mess_type_;
}
inline void DelFriendReq::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 user_id = 3;
inline bool DelFriendReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelFriendReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelFriendReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelFriendReq::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 DelFriendReq::user_id() const {
  return user_id_;
}
inline void DelFriendReq::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 other_id = 4;
inline bool DelFriendReq::has_other_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DelFriendReq::set_has_other_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DelFriendReq::clear_has_other_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DelFriendReq::clear_other_id() {
  other_id_ = 0;
  clear_has_other_id();
}
inline ::google::protobuf::int32 DelFriendReq::other_id() const {
  return other_id_;
}
inline void DelFriendReq::set_other_id(::google::protobuf::int32 value) {
  set_has_other_id();
  other_id_ = value;
}

// -------------------------------------------------------------------

// DelFriendRsp

// optional int32 ver = 1;
inline bool DelFriendRsp::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelFriendRsp::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelFriendRsp::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelFriendRsp::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 DelFriendRsp::ver() const {
  return ver_;
}
inline void DelFriendRsp::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool DelFriendRsp::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelFriendRsp::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelFriendRsp::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelFriendRsp::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 DelFriendRsp::mess_type() const {
  return mess_type_;
}
inline void DelFriendRsp::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 ret = 3;
inline bool DelFriendRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelFriendRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelFriendRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelFriendRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 DelFriendRsp::ret() const {
  return ret_;
}
inline void DelFriendRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// AddBlackReq

// optional int32 ver = 1;
inline bool AddBlackReq::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddBlackReq::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddBlackReq::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddBlackReq::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 AddBlackReq::ver() const {
  return ver_;
}
inline void AddBlackReq::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool AddBlackReq::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddBlackReq::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddBlackReq::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddBlackReq::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 AddBlackReq::mess_type() const {
  return mess_type_;
}
inline void AddBlackReq::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 user_id = 3;
inline bool AddBlackReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddBlackReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddBlackReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddBlackReq::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 AddBlackReq::user_id() const {
  return user_id_;
}
inline void AddBlackReq::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 other_id = 4;
inline bool AddBlackReq::has_other_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddBlackReq::set_has_other_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddBlackReq::clear_has_other_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddBlackReq::clear_other_id() {
  other_id_ = 0;
  clear_has_other_id();
}
inline ::google::protobuf::int32 AddBlackReq::other_id() const {
  return other_id_;
}
inline void AddBlackReq::set_other_id(::google::protobuf::int32 value) {
  set_has_other_id();
  other_id_ = value;
}

// -------------------------------------------------------------------

// AddBlackRsp

// optional int32 ver = 1;
inline bool AddBlackRsp::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddBlackRsp::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddBlackRsp::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddBlackRsp::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 AddBlackRsp::ver() const {
  return ver_;
}
inline void AddBlackRsp::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool AddBlackRsp::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddBlackRsp::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddBlackRsp::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddBlackRsp::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 AddBlackRsp::mess_type() const {
  return mess_type_;
}
inline void AddBlackRsp::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 ret = 3;
inline bool AddBlackRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddBlackRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddBlackRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddBlackRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AddBlackRsp::ret() const {
  return ret_;
}
inline void AddBlackRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// DelBlackReq

// optional int32 ver = 1;
inline bool DelBlackReq::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelBlackReq::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelBlackReq::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelBlackReq::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 DelBlackReq::ver() const {
  return ver_;
}
inline void DelBlackReq::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool DelBlackReq::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelBlackReq::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelBlackReq::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelBlackReq::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 DelBlackReq::mess_type() const {
  return mess_type_;
}
inline void DelBlackReq::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 user_id = 3;
inline bool DelBlackReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelBlackReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelBlackReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelBlackReq::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 DelBlackReq::user_id() const {
  return user_id_;
}
inline void DelBlackReq::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 other_id = 4;
inline bool DelBlackReq::has_other_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DelBlackReq::set_has_other_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DelBlackReq::clear_has_other_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DelBlackReq::clear_other_id() {
  other_id_ = 0;
  clear_has_other_id();
}
inline ::google::protobuf::int32 DelBlackReq::other_id() const {
  return other_id_;
}
inline void DelBlackReq::set_other_id(::google::protobuf::int32 value) {
  set_has_other_id();
  other_id_ = value;
}

// -------------------------------------------------------------------

// DelBlackRsp

// optional int32 ver = 1;
inline bool DelBlackRsp::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelBlackRsp::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelBlackRsp::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelBlackRsp::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 DelBlackRsp::ver() const {
  return ver_;
}
inline void DelBlackRsp::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
}

// optional int32 mess_type = 2;
inline bool DelBlackRsp::has_mess_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelBlackRsp::set_has_mess_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelBlackRsp::clear_has_mess_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelBlackRsp::clear_mess_type() {
  mess_type_ = 0;
  clear_has_mess_type();
}
inline ::google::protobuf::int32 DelBlackRsp::mess_type() const {
  return mess_type_;
}
inline void DelBlackRsp::set_mess_type(::google::protobuf::int32 value) {
  set_has_mess_type();
  mess_type_ = value;
}

// optional int32 ret = 3;
inline bool DelBlackRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelBlackRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelBlackRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelBlackRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 DelBlackRsp::ret() const {
  return ret_;
}
inline void DelBlackRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ssp

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_5fdefine_2eproto__INCLUDED
